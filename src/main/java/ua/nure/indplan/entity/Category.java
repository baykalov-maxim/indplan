package ua.nure.indplan.entity;
// Generated Apr 22, 2017 3:48:50 PM by Hibernate Tools 5.1.0.Alpha1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

/**
 * Category generated by hbm2java
 */
@Entity
@Table(name = "category", uniqueConstraints = @UniqueConstraint(columnNames = "title"))
@NamedQuery(name="Category.findAll", query="SELECT c FROM Category c")
public class Category implements java.io.Serializable {

	private Integer id;
	private CategoryType type;
	private String title;
	private Integer timerate;
	private String timeunit;
	private Integer perrate;
	private String perunit;
	private String report;
	private String description;
	private boolean deleted;
	private Set<Work> works = new HashSet<Work>(0);

	public Category() {
	}

	public Category(CategoryType categorytype, String title) {
		this.type = categorytype;
		this.title = title;
	}

	public Category(CategoryType categorytype, String title, Integer timerate, String timeunit, Integer perrate,
			String perunit, String report, String description, boolean deleted, Set<Work> works) {
		this.type = categorytype;
		this.title = title;
		this.timerate = timerate;
		this.timeunit = timeunit;
		this.perrate = perrate;
		this.perunit = perunit;
		this.report = report;
		this.description = description;
		this.deleted = deleted;
		this.works = works;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "type_id", nullable = false)
	public CategoryType getType() {
		return this.type;
	}

	public void setType(CategoryType type) {
		this.type = type;
	}

	@Column(name = "title", unique = true, nullable = false)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "timerate")
	public Integer getTimerate() {
		return this.timerate;
	}

	public void setTimerate(Integer timerate) {
		this.timerate = timerate;
	}

	@Column(name = "timeunit", length = 64)
	public String getTimeunit() {
		return this.timeunit;
	}

	public void setTimeunit(String timeunit) {
		this.timeunit = timeunit;
	}

	@Column(name = "perrate")
	public Integer getPerrate() {
		return this.perrate;
	}

	public void setPerrate(Integer perrate) {
		this.perrate = perrate;
	}

	@Column(name = "perunit", length = 64)
	public String getPerunit() {
		return this.perunit;
	}

	public void setPerunit(String perunit) {
		this.perunit = perunit;
	}

	@Column(name = "report")
	public String getReport() {
		return this.report;
	}

	public void setReport(String report) {
		this.report = report;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "deleted", nullable = false, columnDefinition="b'0")
	public boolean isDeleted() {
		return this.deleted;
	}

	public void setDeleted(boolean deleted) {
		this.deleted = deleted;
	}

	@ManyToMany(fetch = FetchType.EAGER, cascade=CascadeType.ALL)
	@JoinTable(name = "work_has_category", joinColumns = {
			@JoinColumn(name = "category_id", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "work_id", nullable = false, updatable = false) })
	public Set<Work> getWorks() {
		return this.works;
	}

	public void setWorks(Set<Work> works) {
		this.works = works;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((description == null) ? 0 : description.hashCode());
		result = prime * result + ((perrate == null) ? 0 : perrate.hashCode());
		result = prime * result + ((perunit == null) ? 0 : perunit.hashCode());
		result = prime * result + ((report == null) ? 0 : report.hashCode());
		result = prime * result + ((timerate == null) ? 0 : timerate.hashCode());
		result = prime * result + ((timeunit == null) ? 0 : timeunit.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Category other = (Category) obj;
		if (description == null) {
			if (other.description != null)
				return false;
		} else if (!description.equals(other.description))
			return false;
		if (perrate == null) {
			if (other.perrate != null)
				return false;
		} else if (!perrate.equals(other.perrate))
			return false;
		if (perunit == null) {
			if (other.perunit != null)
				return false;
		} else if (!perunit.equals(other.perunit))
			return false;
		if (report == null) {
			if (other.report != null)
				return false;
		} else if (!report.equals(other.report))
			return false;
		if (timerate == null) {
			if (other.timerate != null)
				return false;
		} else if (!timerate.equals(other.timerate))
			return false;
		if (timeunit == null) {
			if (other.timeunit != null)
				return false;
		} else if (!timeunit.equals(other.timeunit))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		return true;
	}
	
	public String rates() {
		return timerate == null ? null : new StringBuffer().append(timerate).append(' ').append(timeunit)
				.append(" на ").append(perrate).append(' ').append(perunit).toString();
	}
// 099 256 71 24
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append("Category [");
		sb.append(title);
		sb.append(", ");
		sb.append(timerate);
		sb.append(" ");
		sb.append(timeunit);
		sb.append(" на ");
		sb.append(perrate);
		sb.append(" ");
		sb.append(perunit);
		sb.append(", ");
		sb.append(report);
		sb.append(", ");
		sb.append(description);
		sb.append("]");
		return sb.toString();
	}

	
}
